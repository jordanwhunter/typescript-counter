{"version":3,"sources":["components/Button.tsx","modules/calc.ts","components/Calculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonType","InputType","OperatorType","StyledButton","styled","button","Button","label","position","width","height","buttonType","Operation","onClick","styles","gridColumnStart","gridRowStart","gridColumnEnd","gridRowEnd","Number","color","background","style","getOperationsBuilder","inputs","reduce","builder","input","type","Numerical","newValue","working","value","Operator","operator","Equals","operations","Add","getTotal","sum","operation","Subtract","Calc","getState","lastOperation","length","displayValue","lastInput","total","Container","div","Grid","Display","Calculator","useState","setInputs","appendInput","prev","handleNumerical","handleOperator","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ab8cde0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport enum ButtonType {\n  Number,\n  Operation\n};\n\ntype ButtonProps = React.HTMLProps<HTMLButtonElement> & {\n  label: string;\n  // ↓↓↓ Look Ma! a TUPLE in the optional position prop!\n  position?: [x: number, y: number];\n  width?: number;\n  height?: number;\n  buttonType?: ButtonType;\n};\n\nconst StyledButton = styled.button`\n  background-color: #727171;\n  border: none;\n  border-radius: 8px;\n  font-size: 24px;\n  color: #fff;\n`;\n\nconst Button: React.FC<ButtonProps> = ({ \n  label, \n  position, \n  width, \n  height, \n  buttonType = ButtonType.Operation,\n  onClick\n}) => {\n  const styles: React.CSSProperties = {};\n  if (position) {\n    styles.gridColumnStart = position[0] + 1;\n    styles.gridRowStart = position[1] + 1;\n  }\n  if (width) {\n    styles.gridColumnEnd = `span ${width}`;\n  }\n  if (height) {\n    styles.gridRowEnd = `span ${height}`;\n  }\n  if (buttonType === ButtonType.Number) {\n    styles.color = '#000';\n    styles.background = '#e48900';\n  }\n  \n  return (\n    <StyledButton onClick={onClick} style={styles}>\n      {label}\n    </StyledButton>\n  )\n};\n\nexport default Button;","export enum InputType {\n  Numerical,\n  Operator\n};\n\nexport enum OperatorType {\n  Add = 'add',\n  Subtract = 'subtract',\n  Equals = 'equals'\n};\n\nexport type CalcInput = \n| {\n  type: InputType.Numerical;\n  value: number\n} \n| {\n  type: InputType.Operator;\n  operator: OperatorType\n};\n\nexport type CalcState = {\n  displayValue: number;\n};\n\nexport type Operation = {\n  operator: OperatorType;\n  value: number;\n};\n\ntype OperationsBuilder = {\n  operations: Operation[];\n  working: Operation;\n};\n\nexport const getOperationsBuilder = (inputs: Array<CalcInput>): OperationsBuilder => {\n  return inputs.reduce<OperationsBuilder>(\n    (builder, input): OperationsBuilder => {\n      switch(input.type) {\n        case InputType.Numerical:\n          // output current value OR output 0\n          const prevValue = builder.working?.value || 0;\n          // multiplied by 10 to append to right\n          const newValue = prevValue * 10 + input.value;\n\n          return {\n            ...builder, \n            working: { \n              ...builder.working,\n              value: newValue \n            }\n          };\n\n        case InputType.Operator:\n          if (input.operator === OperatorType.Equals) {\n            return {\n              operations: [\n                ...builder.operations, \n                builder.working,\n                {\n                  operator: OperatorType.Equals, \n                  value: 0\n                }\n              ],\n              working: { \n                operator: OperatorType.Add, \n                value: 0 \n              }\n            } \n          } else {\n            return {\n              operations: [\n                ...builder.operations, \n                builder.working\n              ],\n              working: { \n                operator: input.operator, \n                value: 0 \n              } \n            }\n          };\n      };\n    },\n    {\n      operations: [], \n      working: { \n        operator: OperatorType.Add,\n        value: 0\n      }\n    } as OperationsBuilder\n  );\n};\n\nconst getTotal = (operations: Array<Operation>): number =>\n  operations.reduce<number>((sum, operation) => {\n    switch(operation.operator) {\n      case OperatorType.Add:\n        return sum + operation.value;\n\n      case OperatorType.Subtract:\n        return sum - operation.value;\n\n      case OperatorType.Equals:\n        return sum;\n    }\n  }, 0);\n\nconst getState = (inputs: Array<CalcInput>): CalcState => {\n  const builder = getOperationsBuilder(inputs);\n  const { operations } = builder;\n  const lastOperation = operations.length\n    ? operations[operations.length - 1]\n    : null;\n  if (!lastOperation) return {displayValue: builder.working.value};\n\n  const lastInput = inputs.length\n    ? inputs[inputs.length - 1]\n    : null;\n  \n  const total = getTotal(operations);\n\n  switch (lastOperation.operator) {\n    case OperatorType.Equals:\n      return { displayValue: getTotal(operations) }\n    \n    default:\n      return { \n        displayValue: lastInput && lastInput.type === InputType.Numerical\n          ? builder.working.value \n          : total,\n      };\n  }\n};\n\nconst Calc = {\n  getOperationsBuilder,\n  getState\n};\n\nexport default Calc;","import React, { useState } from 'react';\nimport Button, { ButtonType } from './Button';\nimport Calc, { CalcInput, InputType, OperatorType } from '../modules/calc';\nimport styled from 'styled-components';\n\nconst Container = styled.div``;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 80px);\n  grid-template-rows: 120px repeat(5, 80px);\n  grid-gap: 10px;\n`;\n\nconst Display = styled.div`\n  background: #fff;\n  border-radius: 8px;\n  text-align: right;\n  font-size: 48px;\n  grid-column-end: span 4;\n  padding: 30px 24px;\n`;\n\nconst Calculator: React.FC<{}> = () => {\n  const [inputs, setInputs] = useState<Array<CalcInput>>([]);\n  const state = Calc.getState(inputs);\n  const { displayValue } = state;\n  // console.log(inputs)\n  \n  const handleAllClear = () => setInputs([]);\n\n  const handleClear = () => setInputs(prev => prev.slice(0, -1));\n\n  const appendInput = (input: CalcInput): void => {\n    setInputs((prev) => [...prev, input])\n  };\n  \n  const handleNumerical = (value: number) => () => {\n    appendInput({ type: InputType.Numerical, value })\n  };\n\n  const handleOperator = (operator: OperatorType) => () => {\n    appendInput({ type: InputType.Operator, operator})\n  };\n\n  return (\n    <Container>\n      <Grid>\n        <Display>{displayValue}</Display>\n        <Button label='AC' position={[0, 1]} width={2} onClick={handleAllClear} />\n        <Button label='C' position={[2, 1]} width={2} onClick={handleClear}/>\n        <Button label='-' position={[3, 2]} onClick={handleOperator(OperatorType.Subtract)} />\n        <Button label='+' position={[3, 3]} onClick={handleOperator(OperatorType.Add)} />\n        <Button label='=' position={[3, 4]} height={2} onClick={handleOperator(OperatorType.Equals)} />\n        <Button label='9' position={[2, 2]} buttonType={ButtonType.Number} onClick={handleNumerical(9)} />\n        <Button label='8' position={[1, 2]} buttonType={ButtonType.Number} onClick={handleNumerical(8)} />\n        <Button label='7' position={[0, 2]} buttonType={ButtonType.Number} onClick={handleNumerical(7)} />\n        <Button label='6' position={[2, 3]} buttonType={ButtonType.Number} onClick={handleNumerical(6)} />\n        <Button label='5' position={[1, 3]} buttonType={ButtonType.Number} onClick={handleNumerical(5)} />\n        <Button label='4' position={[0, 3]} buttonType={ButtonType.Number} onClick={handleNumerical(4)} />\n        <Button label='3' position={[2, 4]} buttonType={ButtonType.Number} onClick={handleNumerical(3)} />\n        <Button label='2' position={[1, 4]} buttonType={ButtonType.Number} onClick={handleNumerical(2)} />\n        <Button label='1' position={[0, 4]} buttonType={ButtonType.Number} onClick={handleNumerical(1)} />\n        <Button label='0' position={[0, 5]} buttonType={ButtonType.Number} width={3} onClick={handleNumerical(0)} />\n      </Grid>\n    </Container>\n  )\n};\n\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/Calculator';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst Container = styled.div`\n  display: flex;\n  min-height: 100vh;\n  width: 100vw;\n  background: #323232;\n  align-items: center;\n  justify-content: center;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Calculator />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}